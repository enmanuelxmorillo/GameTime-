//variables for stars and features in home screen
    var stars = [];
    var numStars = 100;
    var XstarPos = [];
    var YstarPos = [];
    var lines = "! Dont\n     Lose !";
    var f = createFont("fantasy",75);
    var currentScene = 4;// if scene is 0 player is back at start they must select  
    var  drawBit = function(X,Y,h){
    noStroke();
         //head
        noStroke();
        fill (173, 135, 85);
        ellipse(X+h/150*97,Y+h/150*85,h/150*83,h/150*100);
        //hair
        fill(31, 20, 20);
        quad(X+h/150*76,Y+h/150*39,X+h/150*55,Y+h/150*64,X+h/150*134,Y+h/150*63,X    +h/150*111,Y+h/150*36);
        ellipse(X+h/150*59,Y+h/150*62,h/150*27,h/150*28);
        ellipse(X+h/150*77,Y+h/150*62,h/150*27,h/150*28);
        ellipse(X+h/150*99,Y+h/150*62,h/150*27,h/150*28);
        ellipse(X+h/150*119,Y+h/150*62,h/150*27,h/150*28);
        ellipse(X+h/150*133,Y+h/150*62,h/150*27,h/150*28);
        ellipse(X+h/150*70,Y+h/150*47,h/150*27,h/150*28);
        ellipse(X+h/150*84,Y+h/150*40,h/150*27,h/150*28);
        ellipse(X+h/150*104,Y+h/150*40,h/150*27,h/150*28);
        ellipse(X+h/150*119,Y+h/150*46,h/150*27,h/150*28);
    //hair
      //eyes
      fill(252, 252, 252);
       ellipse(X+h/150*81,Y+h/150*89,h/150*14,h/150*11);
       ellipse(X+h/150*107,Y+h/150*89,h/150*14,h/150*11);
      fill(28, 24, 15);
      ellipse(X+h/150*80,Y+h/150*89,h/150*4,h/150*4);
      ellipse(X+h/150*106,Y+h/150*89,h/150*4,h/150*4);
      //eyes
      //nose
     arc(X+h/150*96, Y+h/150*87, h/150*139, h/150*40, 95, 100);
     //nose
     //mouth
     fill(245, 242, 242);
     arc(X+h/150*95,Y+h/150*112,h/150*30,h/150*13,1,180);
    //mouth
    //jaw shape
    //fill(255, 255, 255);
    //ellipse(X+h/150*30,Y+h/150*135,h/150*83,h/150*100);
    //ellipse(X+h/150*164,Y+h/150*135,h/150*83,h/150*100);
    //jaw shape
    // neck and shirt
    fill(173, 135, 85);
    ellipse(X+h/150*97,Y+h/150*161,h/150*52,h/150*79);
    fill(122, 122, 122);
    rect(X+h/150*52, Y+h/150*133, h/150*94, h/150*75, h/150*30);
    //neck and shirt
    //undershirt and chain and jewlery
     fill(245, 242, 242);
     arc(X+h/150*97,Y+h/150*135,h/150*29,h/150*30,1,180);
     fill(250, 230, 13);
     ellipse(X+h/150*136,Y+h/150*100,h/150*7,h/150*9);
    ellipse(X+h/150*57,Y+h/150*100,h/150*7,h/150*9);
   
    //text("EM", X+h/150*88, Y+h/150*174);
    };
    var drawBitmoji = function(x,y,bitmojiHeight){
        //background(250, 250, 250);
   
    noStroke();
    fill(107, 59, 1);
    triangle(x+(bitmojiHeight/150*138),y+(bitmojiHeight/150*46),x+(bitmojiHeight/150*50),y+(bitmojiHeight/150*47),x+(bitmojiHeight/150*34),y+(bitmojiHeight/150*71));
    triangle(x+(bitmojiHeight/150*136),y+(bitmojiHeight/150*46),x+(bitmojiHeight/150*56),y+(bitmojiHeight/150*52),x+(bitmojiHeight/150*36),y+(bitmojiHeight/150*81));
    triangle(x+(bitmojiHeight/150*138),y+(bitmojiHeight/150*82),x+(bitmojiHeight/150*62),y+(bitmojiHeight/150*14),x+(bitmojiHeight/150*51),y+(bitmojiHeight/150*90));
    triangle(x+(bitmojiHeight/150*166),y+(bitmojiHeight/150*68),x+(bitmojiHeight/150*149),y+(bitmojiHeight/150*50),x+(bitmojiHeight/150*41),y+(bitmojiHeight/150*80));
    triangle(x+(bitmojiHeight/150*166),y+(bitmojiHeight/150*77),x+(bitmojiHeight/150*134),y+(bitmojiHeight/150*49),x+(bitmojiHeight/150*48),y+(bitmojiHeight/150*78));
    triangle(x+(bitmojiHeight/150*151),y+(bitmojiHeight/150*89),x+(bitmojiHeight/150*140),y+(bitmojiHeight/150*58),x+(bitmojiHeight/150*47),y+(bitmojiHeight/150*80));
   
    fill(245, 171, 86);
    ellipse(x+(bitmojiHeight/150*100),y+(bitmojiHeight/150*59),bitmojiHeight/150*93,bitmojiHeight/150*114);//head
   
    fill(255, 255, 255);
    arc(x+(bitmojiHeight/150*140),y+(bitmojiHeight/150*120),bitmojiHeight/150*29,bitmojiHeight/150*-65,40,203);//left jaw
    arc(x+(bitmojiHeight/150*63),y+(bitmojiHeight/150*122),bitmojiHeight/150*29,bitmojiHeight/150*-65,-38,101);//right jaw
   
    fill(107, 59, 1);
    arc(x+(bitmojiHeight/150*82),y+(bitmojiHeight/150*18),bitmojiHeight/150*50,bitmojiHeight/150*-40,383,592);//top hair
    arc(x+(bitmojiHeight/150*119),y+(bitmojiHeight/150*18),bitmojiHeight/150*50,bitmojiHeight/150*-40,331,515);//top hair
    arc(x+(bitmojiHeight/150*44),y+(bitmojiHeight/150*33),bitmojiHeight/150*50,bitmojiHeight/150*-40,597,781);//top hair
    arc(x+(bitmojiHeight/150*158),y+(bitmojiHeight/150*32),bitmojiHeight/150*50,bitmojiHeight/150*-40,492,666);//top hair
   
    stroke(5, 5, 5);
    fill(252, 252, 252);
    arc(x+(bitmojiHeight/150*101),y+(bitmojiHeight/150*80),bitmojiHeight/150*32,bitmojiHeight/150*-21,170,378);//smile
   
    fill(59, 62, 69);
    rect(x+(bitmojiHeight/150*72),y+(bitmojiHeight/150*42),bitmojiHeight/150*20,bitmojiHeight/150*16);//left sunglass
    rect(x+(bitmojiHeight/150*108),y+(bitmojiHeight/150*42),bitmojiHeight/150*20,bitmojiHeight/150*16);//right sunglass
    line(x+(bitmojiHeight/150*92),y+(bitmojiHeight/150*48),x+(bitmojiHeight/150*108),y+(bitmojiHeight/150*48));//sunglass connector
    line(x+(bitmojiHeight/150*55),y+(bitmojiHeight/150*49),x+(bitmojiHeight/150*74),y+(bitmojiHeight/150*43));//left sunglass
    line(x+(bitmojiHeight/150*146),y+(bitmojiHeight/150*49),x+(bitmojiHeight/150*127),y+(bitmojiHeight/150*43));//right sunglass
   
    fill(245, 171, 86);
    arc(x+(bitmojiHeight/150*96),y+(bitmojiHeight/150*65),bitmojiHeight/150*20,bitmojiHeight/150*-12,265,416);//nose    
   
    fill(245, 171, 86);
    rect(x+(bitmojiHeight/150*41),y+(bitmojiHeight/150*133),bitmojiHeight/150*25,bitmojiHeight/150*52);//left arm
   
    fill(245, 171, 86);
    rect(x+(bitmojiHeight/150*132),y+(bitmojiHeight/150*133),bitmojiHeight/150*25,bitmojiHeight/150*52);//left arm
   
    fill(57, 128, 209);
    rect(x+(bitmojiHeight/150*50),y+(bitmojiHeight/150*112),bitmojiHeight/150*97,bitmojiHeight/150*89);//shirt
   
    fill(57, 128, 209);
    arc(x+(bitmojiHeight/150*54),y+(bitmojiHeight/150*131),bitmojiHeight/150*28,bitmojiHeight/150*-37,102,264);//left sleeve
    arc(x+(bitmojiHeight/150*146),y+(bitmojiHeight/150*131),bitmojiHeight/150*28,bitmojiHeight/150*-37,271,463);//right sleeve
   
    fill(245, 242, 242);
    textSize(bitmojiHeight/150*37);
    text("DN",x+(bitmojiHeight/150*71),y+(bitmojiHeight/150*157));
    };
    //level 1 variables
    var ellipseYz = 150; //Starting pos for balls
    var ellipseY2z = 150;
    var ellipseY3z = 207;
    var ellipseY4z = 331;
    var speedz =1; //How fast the bounce is (circ)
    var speed2z = 2.5;
    var speed3z = 4; // rect
    var speed4z = 2;
    var speed5z = 4;
    var speed6z = 2;
    var rectXz = 183;
    var rectX2z = 290;
    var rectYz = 200;
    var squareX = 66;
    var squareY = 31;
    //variables for level 2
    var speed = 1;
    var speed2 = 3;
    var speed3 = 2; // object speed
    var rectX = 0;
    var rectXr = 98;
    var rectX2 = 308;
    var rectX3 = 314;
    var rectX4 = 0;
    var rectY = 0;
    var ellipseY1 = 310; // Starting pos for balls
    var ellipseY2 = 380;
    var ellipseY3 = 390;
    var ellipseY4 = 394;
    var ellipseSpeed1 = 2; // Speed for the first ball
    var ellipseSpeed2 = -3; // Speed for the second ball
    var ellipseSpeed3 = -2.5;// speed for the third ball
    var ellipseSpeed4 = 1;
        // Level 3 Variables
    var ellipseX1q = 50;
    var ellipseY1q = 350;
    var ellipseSpeedX1q = 2;
    var ellipseSpeedY1q = -2;
    
    var ellipseX2q = 200;
    var ellipseY2q = 200;
    var ellipseSpeedX2q = -3;
    var ellipseSpeedY2q = 3;
    
    var ellipseX3q = 300;
    var ellipseY3q = 100;
    var ellipseSpeedX3q = 1;
    var ellipseSpeedY3q = -1;
    
    var squareX = 20;
    var squareY = 20;
    var moving3 = false;

    // Square design var  
    var squareSize = 30;
    var squareX = 200;
    var squareY = 200;

//User
var moving = false; 
var moving2 = false;

// splash screen background
 for(var i =0; i < numStars; ++i)
    {
      XstarPos.push(round(random(10,390)));
      YstarPos.push(round(random(0,50)));  
    }
   
var draw = function () {
    // This creates the gradient colors
    var a = color(15, 13, 13);
    var b = color(66, 71, 120);
    for (var i = -1; i < 398; i++) {
        stroke(lerpColor(a, b, i / 445));
        line(444, i, -2, i);
    }

    // Creates stars moving
    noStroke();
    fill(252, 252, 252);
    for (var i = 0; i < XstarPos.length; i++) {
        ellipse(XstarPos[i], YstarPos[i], 5, 5);
        YstarPos[i] += 2;
        if (YstarPos[i] > 400) {
            YstarPos[i] = round(random(-100, 0));
        }
    }
    for (var i = 0; i < XstarPos.length; i++) {
        ellipse(XstarPos[i], YstarPos[i], 5, 5);
        XstarPos[i] += 2; // Adjust the speed of movement
        if (XstarPos[i] > 400) {
            XstarPos[i] = round(random(-100, 0));
            YstarPos[i] = round(random(50, 350));
        }
    }

    // Bitmoji placers/ names
    stroke(33, 81, 120);
    strokeWeight(5);
    fill(255, 255, 255);
    rect(206, 280, 192, 118);
    noStroke();
    drawBit(208, 276, 50);
    drawBitmoji(321, 281, 43);
    textSize(11);
    fill(23, 20, 20);
    text("Enmanuel.M", 210, 358);
    text("Daniel.N", 327, 358);
    text("Game created on November..", 220, 383);

    // Title and instructions
    textFont(f);
    fill(255, 255, 255);
    textLeading(54);
    text(lines, 44, 82);
    textSize(14);
    text("This is a challenging game. Play at your own risk and try not to rage.", 5, 173);

    // Button
    rect(118, 195, 154, 58, 50);
    fill(3, 3, 3);
    textSize(43);
    text("Start", 147, 240);
// Instruction screen!!!!!!
    if (currentScene === 1) {
        
        for (var i = -1; i < 398; i++) {
            stroke(lerpColor(a, b, i / 445));
            line(444, i, -2, i);
        }

        // Second button 
        rect(118, 275, 154, 58, 50);
        fill(219, 138, 219);
        textSize(43);
        text("Next", 149, 318);
        textSize(15);
        text("Get the square to the other side !", 99, 89);
        textSize(18);
        text("USE the  UP DOWN RIGHT LEFT keys ", 48, 138);
        textSize(15);
        text("Dont Lose Dont Get Hit Dont give up !", 80, 189); 
    }
//LEVEL 1!!!!!
    if(currentScene === 2){
        background(26, 23, 23);
    fill(245, 242, 242);
    //Draw boundaries
    rect(0,74,354,7);
    rect(44,164,354,7);
    rect(0,248,354,7);
    //Draw the balls
    ellipse(100,ellipseYz,15,15);
    ellipse(150,ellipseY2z,15,15);
    ellipse(200,ellipseYz,15,15);
    ellipse(250,ellipseY2z,15,15);
    ellipse(300,ellipseYz,15,15);
    ellipseYz += speedz;
    ellipseY2z += speed2z;
    //Create the bounce boundaries
     if (ellipseYz > 160 || ellipseYz < 85) {
        speedz *= -1;
     }
     if (ellipseY2z > 160 || ellipseY2z < 85) {
        speed2z *= -1;
     }
     //lower level shapes
     rect(rectX2z,192,11,11);
     rect(rectX2z,219,11,11);
     rect(rectXz,206,11,11);
     rectXz += speed3z;
     rectX2z += speed3z;
     rectYz += speed3z; 
     if (rectXz > 390 || rectXz < 0) {
        speed3z *= -1;
     }
     if (rectX2z > 390 || rectX2z < 0) {
        speed3z *= -1;
     }
     ellipse(52,ellipseY3z,15,15);
     ellipse(345,ellipseY3z,15,15);
     ellipseY3z += speed5z;
   if (ellipseY3z > 249 || ellipseY3z < 175) {
        speed5z *= -1;
     }
     ellipse(198,ellipseY4z,110,110);
     ellipseY4z += speed6z;
    if (ellipseY4z > 375 || ellipseY4z < 300) {
        speed6z *= -1;
     }
     //draw user
     rect(squareX,squareY,20,20);
     //movement
     if (keyIsPressed) {
         if (!moving) {
            moving = true;
            squareX = 10;
            squareY = 10;
        }
        if (keyIsPressed) {
    if (keyCode === UP && squareY > 85) {
        squareY -= 5;
    } 
    else if (keyCode === DOWN && squareY < 350) {
        squareY += 5;
    } 
    else if (keyCode === LEFT && squareX > 0) {
        squareX -= 5;
    } 
    else if (keyCode === RIGHT && squareX < 354) {
        squareX += 5;
    }
    }
     }
    //draw finish box
    fill(0, 221, 255);
    rect(20,307,40,40);
    
    if(squareX > 10 && squareX < 50 && squareY > 305 && squareY < 350){
        currentScene = 3;
    }
    if (
        dist(squareX + 10, squareY + 10, 100, ellipseYz) < 15 ||
        dist(squareX + 10, squareY + 10, 150, ellipseY2z) < 15 ||
        dist(squareX + 10, squareY + 10, 200, ellipseYz) < 15 ||
        dist(squareX + 10, squareY + 10, 250, ellipseY2z) < 15 ||
        dist(squareX + 10, squareY + 10, 300, ellipseYz) < 15 ||
        dist(squareX + 10, squareY + 10, 52, ellipseY3z) < 15 ||
        dist(squareX + 10, squareY + 10, 345, ellipseY3z) < 15 ||
        dist(squareX + 10, squareY + 10, 198, ellipseY4z) < 55 ||
        (
            // Check for collisions with the boundary rectangles
            (squareX + 10 > 0 && squareX < 354 && squareY + 10 > 74 && squareY < 81) ||
            (squareX + 10 > 44 && squareX < 398 && squareY + 10 > 164 && squareY < 171) ||
            (squareX + 10 > 0 && squareX < 354 && squareY + 10 > 248 && squareY < 255)
        )
    ) {
        squareX = 10;
        squareY = 10;
    }
}
//LEVEL 2!!!!!!
   if (currentScene === 3) {
    background(26, 25, 25);

    // Draw the square
    fill(113, 113, 156);
    rect(squareX, squareY, squareSize, squareSize);

    // Check for keyboard input
    if (keyIsPressed) {
        if (!moving2) {
            moving2 = true;
            squareX = 10;
            squareY = 350;
        }
        if (keyCode === UP) {
            squareY -= 5;
        } else if (keyCode === DOWN) {
            squareY += 5;
        } else if (keyCode === LEFT) {
            squareX -= 5;
        } else if (keyCode === RIGHT) {
            squareX += 5;
        }
    }

    // Layout
    fill(245, 240, 240);
    
    //hint 
    textSize(15);
        text("Be Aware you dont have to move right to move up ^?", 37, 124);

    // Boundaries
    fill(240, 231, 231);
    strokeWeight(1);
    stroke(235, 183, 235);
    rect(0, 388, 399, 5);
    rect(0, 307, 309, 5);
    rect(69, 230, 397, 5);
    rect(-1, 158, 319, 5);
    rect(74, 78, 325, 5);

    // All side rects
    rect(rectX, 227, 11, 11); // rect1
    rect(rectX2, 303, 10, 11);
    rect(rectX3, 155, 11, 11);
    rect(rectX4, 75, 11, 11);

    // All the speeds
    rectX += speed3;
    rectX2 += speed3;
    rectX3 += speed2;
    rectX4 += speed2;

    // The rect bounce loops
    if (rectX === 60 || rectX === 0) {
        speed3 *= -1;
    }
    if (rectX2 === 68 || rectX2 === 0) {
        speed3 *= -1;
    }
    if (rectX3 === 314) {
        speed2 += 6;
    }
    if (rectX3 === 395) {
        speed2 *= -1;
    }

    // Balls bounce part
    ellipse(124, ellipseY1, 15, 15);
    ellipse(199, ellipseY3, 15, 15);
    ellipse(269, ellipseY2, 15, 15);
    ellipse(378, ellipseY4, 15, 15);
    ellipse(69, ellipseY4, 15, 15);

    // The position of the ellipses
    ellipseY1 += ellipseSpeed1;
    ellipseY2 += ellipseSpeed2;
    ellipseY3 += ellipseSpeed3;
    ellipseY4 += ellipseSpeed4;

    // Check for collisions with the top and bottom boundaries for the first ball
    if (ellipseY1 < 0 || ellipseY1 > 395) {
        ellipseSpeed1 *= -1;
    }

    // Check for collisions with the top and bottom boundaries for the second ball
    if (ellipseY2 < 0 || ellipseY2 > 395) {
        ellipseSpeed2 *= -1;
    }
    if (ellipseY3 < 0 || ellipseY3 > 395) {
        ellipseSpeed3 *= -1;
    }
    if (ellipseY4 < 0 || ellipseY4 > 395) {
        ellipseSpeed4 *= -1.5;
    }

    // Finish box
    fill(0, 221, 255);
    rect(344, 20, 40, 40);

    // Check for collisions with the finish box
    if (squareY > 10 && squareY < 50 && squareX > 305 && squareX < 350) {
        currentScene = 4;
    }

    // Check for collisions with the boundaries
    if (
        squareX < 0 ||
        squareX + squareSize > 399 ||
        squareY < 0 ||
        squareY + squareSize > 399
    ) {
        // Collision with boundaries occurred
        squareX = 10;
        squareY = 350;
    } else {
        // Check for collisions with specific rects
        if (
            (squareX + squareSize > rectX && squareX < rectX + 11 &&
                squareY + squareSize > 227 && squareY < 238) ||
            (squareX + squareSize > rectX2 && squareX < rectX2 + 10 &&
                squareY + squareSize > 303 && squareY < 314) ||
            (squareX + squareSize > rectX3 && squareX < rectX3 + 11 &&
                squareY + squareSize > 155 && squareY < 166) ||
            (squareX + squareSize > rectX4 && squareX < rectX4 + 11 &&
                squareY + squareSize > 75 && squareY < 86)
        ) {
            // Collision with specific rects occurred
            squareX = 10;
            squareY = 350;
        }
    }

    // Check for collisions with ellipses
    if (
        dist(squareX + squareSize / 2, squareY + squareSize / 2, 124, ellipseY1) < 15 ||
        dist(squareX + squareSize / 2, squareY + squareSize / 2, 199, ellipseY3) < 15 ||
        dist(squareX + squareSize / 2, squareY + squareSize / 2, 269, ellipseY2) < 15 ||
        dist(squareX + squareSize / 2, squareY + squareSize / 2, 378, ellipseY4) < 15 ||
        dist(squareX + squareSize / 2, squareY + squareSize / 2, 69, ellipseY4) < 15
    ) {
        // Collision with ellipses occurred
        squareX = 10;
        squareY = 350;
    }
}



//LEVEL 3!!
    if(currentScene === 4){
         // Layout
  background(247, 244, 244);

  // Boundaries
  fill(random(100,255), random(100,255), random(100,255));
  rect(0, 376, 399, 5);
  rect(0, 280, 309, 5);
  rect(69, 185, 397, 5);
  rect(-1, 81, 319, 5);
  rect(126, 335, 4, -93);
  rect(258, 324, 5, -71);
  rect(64, 225, 5, -71);
  rect(190, 225, 5, -71);
  rect(315, 121, 5, -71);
  rect(128, 120, 5, -71);

  // Moving ellipses
  fill(random(100,255),random(100,255),random(100,255));
  ellipse(ellipseX1q, ellipseY1q, 20, 20);
  ellipse(100, ellipseY1q, 20, 20);
  ellipse(188, ellipseY1q, 20, 20);
  ellipse(302, ellipseY1q, 20, 20);
  ellipse(ellipseX2q, ellipseY2q, 20, 20);
  ellipse(ellipseX2q, 144, 20, 20);
  ellipse(ellipseX3q, ellipseY3q, 20, 20);

  // Update ellipse positions
  ellipseX1q += ellipseSpeedX1q;
  ellipseY1q += ellipseSpeedY1q;

  ellipseX2q += ellipseSpeedX2q;
  ellipseY2q += ellipseSpeedY2q;

  ellipseX3q += ellipseSpeedX3q;
  ellipseY3q += ellipseSpeedY3q;

  // Check for ellipse collisions with boundaries
  if (ellipseX1q < 0 || ellipseX1q > 399) {
    ellipseSpeedX1q *= -1;
  }
  if (ellipseY1q < 0 || ellipseY1q > 376) {
    ellipseSpeedY1q *= -1;
  }

  if (ellipseX2q < 0 || ellipseX2q > 399) {
    ellipseSpeedX2q *= -1;
  }
  if (ellipseY2q < 0 || ellipseY2q > 376) {
    ellipseSpeedY2q *= -1;
  }

  if (ellipseX3q < 0 || ellipseX3q > 399) {
    ellipseSpeedX3q *= -1;
  }
  if (ellipseY3q < 0 || ellipseY3q > 376) {
    ellipseSpeedY3q *= -1;
  }
  
  rect(squareX,squareY,20,20);
  
  fill(0, 221, 255);
  rect(344,321,40,40);
  
  if (keyIsPressed) {
         if (!moving3) {
            moving3 = true;
            squareX = 10;
            squareY = 10;
        }
        if (keyCode === UP) {
            squareY -= 5;
        } else if (keyCode === DOWN) {
            squareY += 5;
        } else if (keyCode === LEFT) {
            squareX -= 5;
        } else if (keyCode === RIGHT) {
            squareX += 5;
        }
    }
     if(squareX > 315 && squareX < 395 && squareY > 315 && squareY < 395){
        currentScene = 5;
     }
         if (dist(squareX + squareSize / 2, squareY + squareSize / 2, ellipseX1q,             ellipseY1q) <     15 ||dist(squareX + squareSize / 2, squareY + squareSize / 2         ,100, ellipseY1q) < 15         ||dist(squareX + squareSize / 2, squareY +             squareSize / 2, 188, ellipseY1q) < 15 ||dist    (squareX + squareSize / 2, squareY + squareSize / 2, 302, ellipseY1q) < 15 ||dist(squareX     + squareSize / 2, squareY + squareSize / 2, ellipseX2q, 144) < 15 ||dist(squareX +         squareSize / 2, squareY + squareSize / 2, ellipseX3q, ellipseY3q) < 15) {
        // Collision with ellipses occurred
        squareX = 10;
        squareY = 10;
    }
    // Check for collisions with the specified rectangles
  if (
    (squareX + 20 > 0 && squareX < 399 && squareY + 20 > 376 && squareY < 381) ||
    (squareX + 20 > 0 && squareX < 399 && squareY + 20 > 280 && squareY < 285) ||
    (squareX + 20 > 69 && squareX < 466 && squareY + 20 > 185 && squareY < 190) ||
    (squareX + 20 > -1 && squareX < 319 && squareY + 20 > 81 && squareY < 86) ||
    (squareX + 20 > 126 && squareX < 130 && squareY + 20 > 242 && squareY < 335) ||
    (squareX + 20 > 258 && squareX < 263 && squareY + 20 > 253 && squareY < 324) ||
    (squareX + 20 > 64 && squareX < 69 && squareY + 20 > 164 && squareY < 235) ||
    (squareX + 20 > 190 && squareX < 195 && squareY + 20 > 163 && squareY < 234) ||
    (squareX + 20 > 315 && squareX < 320 && squareY + 20 > 71 && squareY < 142) ||
    (squareX + 20 > 128 && squareX < 133 && squareY + 20 > 109 && squareY < 180)
  ) {
    // Collision with specified rectangles occurred
    squareX = 10;
    squareY = 10;
  }
  // Check for collisions with the outside boundaries
  if (
    squareX < 0 ||
    squareX + 20 > 399 ||
    squareY < 0 ||
    squareY + 20 > 399
  ) {
    // Collision with boundaries occurred
    squareX = 10;
    squareY = 10;
  }
    }
//FINISH!!!!
    if(currentScene === 5){
        background(242, 234, 234);
            for(var z =0; z<72; z++){
            fill(random(10,350), random(10,350), random(10,350));
            rect(random(10,350),random(10,350),20,20);
        }
        textSize(101);
        fill(0,0,0);
        text("You win!",31,184);
        
    }
};

var mousePressed = function () {
    if (currentScene === 0 && mouseX > 118 && mouseX < 272 && mouseY > 195 && mouseY < 253) {
        currentScene++;
    }
    if (currentScene === 1 && mouseX > 118 && mouseX < 272 && mouseY > 275 && mouseY < 333) {
        currentScene = 2;
    }
    };



